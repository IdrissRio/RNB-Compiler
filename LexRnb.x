-- -*- haskell -*-
-- This Alex file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}
module LexRnb where



import qualified Data.Bits
import Data.Word (Word8)
import Data.Char (ord)
}


$l = [a-zA-Z\192 - \255] # [\215 \247]    -- isolatin1 letter FIXME
$c = [A-Z\192-\221] # [\215]    -- capital isolatin1 letter FIXME
$s = [a-z\222-\255] # [\247]    -- small isolatin1 letter FIXME
$d = [0-9]                -- digit
$i = [$l $d _ ']          -- identifier character
$u = [\0-\255]          -- universal: any character

@rsyms =    -- symbols and non-identifier-like reserved words
   \: | \; | \( | \) | \- \> | \, | \] | \§ | \+ \+ | \- \- | \< \- | \°

:-
"==" [.]* ; -- Toss single line comments
"{=" ([$u # \=] | \=+ [$u # [\= \}]])* ("=")+ "}" ;

$white+ ;
@rsyms { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }
t r y { tok (\p s -> PT p (eitherResIdent (T_BTry . share) s)) }
c a t c h { tok (\p s -> PT p (eitherResIdent (T_BCatch . share) s)) }
l o o p { tok (\p s -> PT p (eitherResIdent (T_BLoop . share) s)) }
c a s e { tok (\p s -> PT p (eitherResIdent (T_BCase . share) s)) }
\: \= { tok (\p s -> PT p (eitherResIdent (T_BAss . share) s)) }
\+ { tok (\p s -> PT p (eitherResIdent (T_BPlus . share) s)) }
\- { tok (\p s -> PT p (eitherResIdent (T_BMinus . share) s)) }
\/ { tok (\p s -> PT p (eitherResIdent (T_BDiv . share) s)) }
\* { tok (\p s -> PT p (eitherResIdent (T_BMul . share) s)) }
\^ { tok (\p s -> PT p (eitherResIdent (T_BUpTo . share) s)) }
\% { tok (\p s -> PT p (eitherResIdent (T_BMod . share) s)) }
a n d { tok (\p s -> PT p (eitherResIdent (T_BAnd . share) s)) }
o r { tok (\p s -> PT p (eitherResIdent (T_BOr . share) s)) }
n o t { tok (\p s -> PT p (eitherResIdent (T_BNot . share) s)) }
\[ { tok (\p s -> PT p (eitherResIdent (T_BLBra . share) s)) }
\< { tok (\p s -> PT p (eitherResIdent (T_BLe . share) s)) }
\< \= { tok (\p s -> PT p (eitherResIdent (T_BLeEq . share) s)) }
\> { tok (\p s -> PT p (eitherResIdent (T_BGr . share) s)) }
\> \= { tok (\p s -> PT p (eitherResIdent (T_BGrEq . share) s)) }
\< \> { tok (\p s -> PT p (eitherResIdent (T_BNotEq . share) s)) }
\= { tok (\p s -> PT p (eitherResIdent (T_BEq . share) s)) }
T r u e | F a l s e { tok (\p s -> PT p (eitherResIdent (T_BBool . share) s)) }
r e t u r n { tok (\p s -> PT p (eitherResIdent (T_BReturn . share) s)) }
e x i t { tok (\p s -> PT p (eitherResIdent (T_BExit . share) s)) }
c o n t i n u e { tok (\p s -> PT p (eitherResIdent (T_BContinue . share) s)) }
e x i t o n { tok (\p s -> PT p (eitherResIdent (T_BExitOn . share) s)) }
($l | \_)($l | $d | \_)* { tok (\p s -> PT p (eitherResIdent (T_BIdent . share) s)) }
$d + { tok (\p s -> PT p (eitherResIdent (T_BInteger . share) s)) }
$d + \. $d + (e \- ? $d +)? { tok (\p s -> PT p (eitherResIdent (T_BReal . share) s)) }
\' ($u # [\' \\]| \\ [\' \\ n t]) \' { tok (\p s -> PT p (eitherResIdent (T_BChar . share) s)) }
\" ($u # [\" \\]| \\ [\" \\ n t]) * \" { tok (\p s -> PT p (eitherResIdent (T_BString . share) s)) }

$l $i*   { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }





{

tok :: (Posn -> String -> Token) -> (Posn -> String -> Token)
tok f p s = f p s

share :: String -> String
share = id

data Tok =
   TS !String !Int    -- reserved words and symbols
 | TL !String         -- string literals
 | TI !String         -- integer literals
 | TV !String         -- identifiers
 | TD !String         -- double precision float literals
 | TC !String         -- character literals
 | T_BTry !String
 | T_BCatch !String
 | T_BLoop !String
 | T_BCase !String
 | T_BAss !String
 | T_BPlus !String
 | T_BMinus !String
 | T_BDiv !String
 | T_BMul !String
 | T_BUpTo !String
 | T_BMod !String
 | T_BAnd !String
 | T_BOr !String
 | T_BNot !String
 | T_BLBra !String
 | T_BLe !String
 | T_BLeEq !String
 | T_BGr !String
 | T_BGrEq !String
 | T_BNotEq !String
 | T_BEq !String
 | T_BBool !String
 | T_BReturn !String
 | T_BExit !String
 | T_BContinue !String
 | T_BExitOn !String
 | T_BIdent !String
 | T_BInteger !String
 | T_BReal !String
 | T_BChar !String
 | T_BString !String

 deriving (Eq,Show,Ord)

data Token =
   PT  Posn Tok
 | Err Posn
  deriving (Eq,Show,Ord)

printPosn :: Posn -> String
printPosn (Pn _ l c) = "line " ++ show l ++ ", column " ++ show c

tokenPos :: [Token] -> String
tokenPos (t:_) = printPosn (tokenPosn t)
tokenPos [] = "end of file"

tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p) = p

tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

mkPosToken :: Token -> ((Int, Int), String)
mkPosToken t@(PT p _) = (posLineCol p, prToken t)

prToken :: Token -> String
prToken t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> show s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  Err _         -> "#error"
  PT _ (T_BTry s) -> s
  PT _ (T_BCatch s) -> s
  PT _ (T_BLoop s) -> s
  PT _ (T_BCase s) -> s
  PT _ (T_BAss s) -> s
  PT _ (T_BPlus s) -> s
  PT _ (T_BMinus s) -> s
  PT _ (T_BDiv s) -> s
  PT _ (T_BMul s) -> s
  PT _ (T_BUpTo s) -> s
  PT _ (T_BMod s) -> s
  PT _ (T_BAnd s) -> s
  PT _ (T_BOr s) -> s
  PT _ (T_BNot s) -> s
  PT _ (T_BLBra s) -> s
  PT _ (T_BLe s) -> s
  PT _ (T_BLeEq s) -> s
  PT _ (T_BGr s) -> s
  PT _ (T_BGrEq s) -> s
  PT _ (T_BNotEq s) -> s
  PT _ (T_BEq s) -> s
  PT _ (T_BBool s) -> s
  PT _ (T_BReturn s) -> s
  PT _ (T_BExit s) -> s
  PT _ (T_BContinue s) -> s
  PT _ (T_BExitOn s) -> s
  PT _ (T_BIdent s) -> s
  PT _ (T_BInteger s) -> s
  PT _ (T_BReal s) -> s
  PT _ (T_BChar s) -> s
  PT _ (T_BString s) -> s


data BTree = N | B String Tok BTree BTree deriving (Show)

eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) | s < a  = treeFind left
                              | s > a  = treeFind right
                              | s == a = t

resWords :: BTree
resWords = b "elseif" 17 (b "<-" 9 (b "--" 5 (b "++" 3 (b ")" 2 (b "(" 1 N N) N) (b "," 4 N N)) (b ":" 7 (b "->" 6 N N) (b ";" 8 N N))) (b "char" 13 (b "]" 11 (b "Array" 10 N N) (b "bool" 12 N N)) (b "create" 15 (b "const" 14 N N) (b "else" 16 N N)))) (b "proc" 26 (b "int" 22 (b "func" 20 (b "for" 19 (b "end" 18 N N) N) (b "if" 21 N N)) (b "local" 24 (b "is" 23 N N) (b "of" 25 N N))) (b "then" 30 (b "ref" 28 (b "real" 27 N N) (b "string" 29 N N)) (b "\167" 32 (b "valres" 31 N N) (b "\176" 33 N N))))
   where b s n = let bs = id s
                  in B bs (TS bs n)

unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '"':[]    -> []
    c:cs      -> c : unesc cs
    _         -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
      deriving (Eq, Show,Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string

tokens :: String -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case  s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
 where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
